var documenterSearchIndex = {"docs":
[{"location":"#Discretize-Distributions.jl","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"","category":"section"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"A Julia package for converting continuous and discrete probability distributions into discrete representations with interval-based support using IntervalArithmetic.jl.","category":"page"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"The package provides functions to discretize univariate distributions into DiscreteNonParametric distributions where the support consists of IntervalArithmetic.Interval objects. Each interval [a, b] represents a probability mass over that range, computed using the cumulative distribution function (CDF) for continuous distributions or aggregated probability mass function (PMF) for discrete distributions.","category":"page"},{"location":"#Limitations","page":"Discretize Distributions.jl","title":"Limitations","text":"","category":"section"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"Finite support: Infinite distributions are truncated using quantile bounds (default 0.1% and 99.9%)\nDiscrete distribution quirks: Discretizing already-discrete distributions has some limitations and edge cases\nNon-integer discrete values: Discrete distributions with non-integer support may behave unexpectedly","category":"page"},{"location":"#Future-Work","page":"Discretize Distributions.jl","title":"Future Work","text":"","category":"section"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"Develop better warnings for incompatible distributions\nSupport for multivariate distributions","category":"page"},{"location":"#API-Overview","page":"Discretize Distributions.jl","title":"API Overview","text":"","category":"section"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"The package provides three main discretize methods:","category":"page"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"Fixed intervals: discretize(dist, interval_width) - Creates uniform intervals of specified width\nCustom boundaries: discretize(dist, boundaries) - Uses custom interval boundaries  \nPre-constructed intervals: discretize(dist, intervals) - Uses pre-built Interval objects","category":"page"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"All methods return a DiscreteNonParametric distribution with IntervalArithmetic.Interval support.","category":"page"},{"location":"#Working-with-Results","page":"Discretize Distributions.jl","title":"Working with Results","text":"","category":"section"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"using Distributions, DiscretizeDistributions, IntervalArithmetic\n\n# Discretize a normal distribution\nnormal_dist = Normal(0, 1)\ninterval_dist = discretize(normal_dist, 0.5)\n\n# The result has interval support\nsupport(interval_dist)  # Vector of Interval{Float64} objects\nprobs(interval_dist)    # Corresponding probabilities\n\n# Convert to point-based distributions\nleft_aligned = left_align_distribution(interval_dist)     # Use left endpoints\ncentered = centred_distribution(interval_dist)            # Use midpoints  \nright_aligned = right_align_distribution(interval_dist)   # Use right endpoints","category":"page"},{"location":"#Mathematical-Details","page":"Discretize Distributions.jl","title":"Mathematical Details","text":"","category":"section"},{"location":"#Continuous-Distributions","page":"Discretize Distributions.jl","title":"Continuous Distributions","text":"","category":"section"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"For continuous distributions, discretisation computes probability masses using the cumulative distribution function (CDF):","category":"page"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"P(X  a_i a_i+1)) = F(a_i+1) - F(a_i)","category":"page"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"where F(x) is the CDF of the continuous distribution X.","category":"page"},{"location":"#Discrete-Distributions","page":"Discretize Distributions.jl","title":"Discrete Distributions","text":"","category":"section"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"For discrete distributions, probability masses are aggregated over intervals using the probability mass function (PMF):","category":"page"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"P(X  a_i a_i+1)) = _k=a_i^a_i+1-1 P(X = k) + (P(X = a_i)  (a_i - a_i)) + (P(X = a_i+1)  (a_i+1 - a_i+1))","category":"page"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"All resulting discrete distributions are normalized to ensure probabilities sum to 1.","category":"page"},{"location":"#Advanced-Usage","page":"Discretize Distributions.jl","title":"Advanced Usage","text":"","category":"section"},{"location":"#Handling-Unbounded-Distributions","page":"Discretize Distributions.jl","title":"Handling Unbounded Distributions","text":"","category":"section"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"For distributions with infinite support, control truncation with quantile bounds:","category":"page"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"# Normal distribution - unbounded in both directions  \nnormal_dist = Normal(0, 1)\ndiscrete_normal = discretize(normal_dist, 0.2; min_quantile=0.005, max_quantile=0.995)\n\n# Exponential distribution - unbounded above\nexp_dist = Exponential(1.0)  \ndiscrete_exp = discretize(exp_dist, 0.1; max_quantile=0.99)\n\n# Result includes infinite tail intervals\nsupport(discrete_exp)  # [..., interval(4.5, 5.0), interval(5.0, ∞)]","category":"page"},{"location":"#Custom-Interval-Structures","page":"Discretize Distributions.jl","title":"Custom Interval Structures","text":"","category":"section"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"Create non-uniform discretisations with custom boundaries:","category":"page"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"# Fine resolution near zero, coarser elsewhere\ncustom_boundaries = [-5.0, -2.0, -1.0, -0.5, 0.0, 0.5, 1.0, 2.0, 5.0]\ndiscrete_custom = discretize(Normal(0, 1), custom_boundaries)\n\n# Results in intervals: [(-∞,-5], [-5,-2], [-2,-1], ..., [5,∞)]\nlength(support(discrete_custom))  # 10 intervals (8 from boundaries + 2 infinite tails)","category":"page"},{"location":"#Working-with-Pre-constructed-Intervals","page":"Discretize Distributions.jl","title":"Working with Pre-constructed Intervals","text":"","category":"section"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"For advanced use cases, you can provide pre-constructed IntervalArithmetic.Interval objects:","category":"page"},{"location":"","page":"Discretize Distributions.jl","title":"Discretize Distributions.jl","text":"using IntervalArithmetic\n\n# Create custom intervals with specific properties\nintervals = [\n    interval(-2.0, -1.0),    # Standard interval\n    interval(-1.0, 0.0),     # Adjacent interval\n    interval(0.0, 2.0),      # Wider interval\n    interval(2.0, Inf)       # Semi-infinite interval\n]\n\n# Discretize using these intervals\nnormal_dist = Normal(0, 1)\ndiscrete_custom = discretize(normal_dist, intervals)","category":"page"},{"location":"#DiscretizeDistributions.discretize","page":"Discretize Distributions.jl","title":"DiscretizeDistributions.discretize","text":"discretize(dist::Distributions.UnivariateDistribution, interval::Real; \n           min_quantile=0.001, max_quantile=0.999)\n\nDiscretize a univariate distribution into an interval-based discrete distribution using fixed intervals.\n\nThis function converts a univariate distribution into a discrete one by dividing the distribution's support into intervals of fixed width and computing the probability mass in each interval. The  resulting distribution has IntervalArithmetic.Interval objects as support points.\n\nArguments\n\ndist::Distributions.UnivariateDistribution: The distribution to discretize (continuous or discrete)\ninterval::Real: The width of each discretisation interval\nmin_quantile=0.001: Lower quantile bound for unbounded distributions\nmax_quantile=0.999: Upper quantile bound for unbounded distributions\n\nReturns\n\nDiscreteNonParametric{Interval{T}, ...}: Discrete distribution with interval support\n\nDetails\n\nFor bounded distributions, the natural bounds are used. For unbounded distributions, the bounds are determined using the specified quantiles. The probability mass in each interval is computed using the CDF for continuous distributions or a pseudo-CDF for discrete distributions.\n\nExamples\n\nusing Distributions, DiscretizeDistributions, IntervalArithmetic\n\n# Discretize a normal distribution with interval width 0.5\nnormal_dist = Normal(0, 1)\ndiscrete_intervals = discretize(normal_dist, 0.5)\n# Returns distribution with support like [interval(-∞, -3.5), interval(-3.5, -3.0), ...]\n\n# Convert to point-based distributions if needed\nleft_aligned = left_align_distribution(discrete_intervals)    # [-3.5, -3.0, -2.5, ...]\ncentered = centred_distribution(discrete_intervals)          # [-3.25, -2.75, -2.25, ...]\n\n# Discretize a discrete distribution\npoisson_dist = Poisson(3.0)\ndiscrete_poisson = discretize(poisson_dist, 2)\n\n\n\n\n\ndiscretize(dist::Distributions.UnivariateDistribution, interval::AbstractVector)\n\nDiscretize a univariate distribution using custom interval boundaries.\n\nThis function converts a univariate distribution into a discrete one using user-specified interval boundaries. The resulting distribution has IntervalArithmetic.Interval objects  as support points representing the probability mass in each interval.\n\nArguments\n\ndist::Distributions.UnivariateDistribution: The distribution to discretize\ninterval::AbstractVector: Vector of interval boundaries (will be sorted automatically)\n\nReturns\n\nDiscreteNonParametric{Interval{T}, ...}: Discrete distribution with interval support\n\nDetails\n\nThe input interval vector is automatically sorted and combined with distribution bounds. Probability masses are computed using the CDF for continuous distributions or pseudo-CDF for discrete distributions. The resulting distribution represents probability masses over intervals [a_i, a_{i+1}).\n\nExamples\n\nusing Distributions, DiscretizeDistributions, IntervalArithmetic\n\n# Discretize using custom intervals\nnormal_dist = Normal(5, 2)\ncustom_intervals = [0.0, 2.0, 4.0, 6.0, 8.0, 10.0]\ndiscrete_intervals = discretize(normal_dist, custom_intervals)\n# Support: [interval(-∞, 0.0), interval(0.0, 2.0), ..., interval(10.0, ∞)]\n\n# Convert to different alignments\nleft_points = left_align_distribution(discrete_intervals)\ncentered_points = centred_distribution(discrete_intervals)\nright_points = right_align_distribution(discrete_intervals)\n\n# Discrete distribution with custom intervals\npoisson_dist = Poisson(3.0)\ndiscrete_poisson = discretize(poisson_dist, [0.5, 2, 4, 6, 8, 10])\n\n\n\n\n\ndiscretize(dist::Distributions.UnivariateDistribution, interval::AbstractVector{IntervalArithmetic.Interval{X}}) where X <: Real\n\nDiscretize a univariate distribution using pre-constructed interval objects.\n\nThis function converts a univariate distribution into a discrete one using user-specified IntervalArithmetic.Interval objects. This is the core discretization method that all other discretize methods ultimately call. The resulting distribution has the same interval objects as support points with computed probability masses.\n\nArguments\n\ndist::Distributions.UnivariateDistribution: The distribution to discretize\ninterval::AbstractVector{IntervalArithmetic.Interval{X}}: Vector of pre-constructed intervals\n\nReturns\n\nDiscreteNonParametric{Interval{X}, ...}: Discrete distribution with interval support\n\nDetails\n\nThis method computes probability masses directly using the interval boundaries. For each interval [a, b], the probability is computed as cdf(dist, b) - cdf(dist, a). The  resulting probabilities are normalized to sum to 1.\n\nExamples\n\nusing Distributions, DiscretizeDistributions, IntervalArithmetic\n\n# Create intervals manually\nintervals = [interval(-1.0, 0.0), interval(0.0, 1.0), interval(1.0, 2.0)]\n\n# Discretize using these intervals\nnormal_dist = Normal(0, 1)\ndiscrete_intervals = discretize(normal_dist, intervals)\n# Each interval gets probability mass according to the normal distribution\n\n\n\n\n\n","category":"function"},{"location":"#DiscretizeDistributions.left_align_distribution","page":"Discretize Distributions.jl","title":"DiscretizeDistributions.left_align_distribution","text":"left_align_distribution(dist::Distributions.DiscreteNonParametric{IntervalArithmetic.Interval{T}, ...})\n\nConvert an interval-based discrete distribution to a left-aligned point-based distribution.\n\nThis function takes a discrete distribution with interval support and creates a new distribution where each support point is positioned at the left endpoint (infimum) of the corresponding interval. Infinite intervals are automatically removed before conversion.\n\nArguments\n\ndist::DiscreteNonParametric{Interval{T}, ...}: Input discrete distribution with interval support\n\nReturns\n\nDiscreteNonParametric{T, ...}: New distribution with left-aligned point support\n\nExamples\n\nusing Distributions, DiscretizeDistributions, IntervalArithmetic\n\n# Create an interval-based distribution\nintervals = [interval(0.0, 1.0), interval(1.0, 2.0), interval(2.0, 3.0)]\nprobs = [0.3, 0.4, 0.3]\ninterval_dist = DiscreteNonParametric(intervals, probs, check_args=false)\n\n# Convert to left-aligned points\nleft_aligned = left_align_distribution(interval_dist)\n# Support becomes [0.0, 1.0, 2.0] (left endpoints of intervals)\n\n\n\n\n\n","category":"function"},{"location":"#DiscretizeDistributions.centred_distribution","page":"Discretize Distributions.jl","title":"DiscretizeDistributions.centred_distribution","text":"centred_distribution(dist::Distributions.DiscreteNonParametric{IntervalArithmetic.Interval{T}, ...})\n\nConvert an interval-based discrete distribution to a centered point-based distribution.\n\nThis function takes a discrete distribution with interval support and creates a new distribution where each support point is positioned at the center (midpoint) of the corresponding interval. Infinite intervals are automatically removed before conversion.\n\nArguments\n\ndist::DiscreteNonParametric{Interval{T}, ...}: Input discrete distribution with interval support\n\nReturns\n\nDiscreteNonParametric{T, ...}: New distribution with centered point support\n\nExamples\n\nusing Distributions, DiscretizeDistributions, IntervalArithmetic\n\n# Create an interval-based distribution\nintervals = [interval(0.0, 1.0), interval(1.0, 2.0), interval(2.0, 3.0)]\nprobs = [0.3, 0.4, 0.3]\ninterval_dist = DiscreteNonParametric(intervals, probs, check_args=false)\n\n# Convert to centered points\ncentered = centred_distribution(interval_dist)\n# Support becomes [0.5, 1.5, 2.5] (midpoints of intervals)\n\n\n\n\n\n","category":"function"},{"location":"#DiscretizeDistributions.right_align_distribution","page":"Discretize Distributions.jl","title":"DiscretizeDistributions.right_align_distribution","text":"right_align_distribution(dist::Distributions.DiscreteNonParametric{IntervalArithmetic.Interval{T}, ...})\n\nConvert an interval-based discrete distribution to a right-aligned point-based distribution.\n\nThis function takes a discrete distribution with interval support and creates a new distribution where each support point is positioned at the right endpoint (supremum) of the corresponding interval. Infinite intervals are automatically removed before conversion.\n\nArguments\n\ndist::DiscreteNonParametric{Interval{T}, ...}: Input discrete distribution with interval support\n\nReturns\n\nDiscreteNonParametric{T, ...}: New distribution with right-aligned point support\n\nExamples\n\nusing Distributions, DiscretizeDistributions, IntervalArithmetic\n\n# Create an interval-based distribution\nintervals = [interval(0.0, 1.0), interval(1.0, 2.0), interval(2.0, 3.0)]\nprobs = [0.3, 0.4, 0.3]\ninterval_dist = DiscreteNonParametric(intervals, probs, check_args=false)\n\n# Convert to right-aligned points\nright_aligned = right_align_distribution(interval_dist)\n# Support becomes [1.0, 2.0, 3.0] (right endpoints of intervals)\n\n\n\n\n\n","category":"function"}]
}
