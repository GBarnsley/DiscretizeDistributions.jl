var documenterSearchIndex = {"docs":
[{"location":"#Discretise-Distributions.jl-Distributions","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"","category":"section"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"A set of functions for converting continuous and discrete probability distributions into discrete representations with specified interval structures. In essence this outputs a DiscreteNonParametric with support x representing [x, x + interval) with probability mass p where p is either the area of the pdf over the interval or the sum of the pmf over the interval (assuming the distribution is uniform between its discrete values), standardized to sum to 1.","category":"page"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"There are a few limitations:","category":"page"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"The support of the discretized distribution is finite, so infinite distributions are truncated to a finite based on set quantiles (default 0.1% and 99.9% quantiles)\nThe support for discretizing a discrete function is weird and limited. In general, you should just do this manually, these are just for my personal convenience. Currently, you can attempt this on distributions where it makes no sense, i.e. a categorical or Bernoulli etc. without error. Also, discrete distributions that support non-integer values are also not supported will still be converted.","category":"page"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"Future work:","category":"page"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"Integrate IntervalArithmetic.jl\nAdd support for intervals with infinite support, this will have to wait since IntervalArithmetic.jl is purposefully not interoperable with Distributions.jl, though bareintervals maybe a solution. This will also simplify the API since all information about the intervals would be contained in the output distribution.\nDevelop a method of warnings for attempts are discretizing distributions that are not compatible, might not be possible.\nSupport for multivariate distributions?","category":"page"},{"location":"#Mathematical-Details","page":"Discretise Distributions.jl Distributions","title":"Mathematical Details","text":"","category":"section"},{"location":"#Continuous-Distributions","page":"Discretise Distributions.jl Distributions","title":"Continuous Distributions","text":"","category":"section"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"For continuous distributions, discretisation computes probability masses using the cumulative distribution function (CDF):","category":"page"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"P(X  a_i a_i+1)) = F(a_i+1) - F(a_i)","category":"page"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"where F(x) is the CDF of the continuous distribution X.","category":"page"},{"location":"#Discrete-Distributions","page":"Discretise Distributions.jl Distributions","title":"Discrete Distributions","text":"","category":"section"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"For discrete distributions, probability masses are aggregated over intervals using the probability mass function (PMF):","category":"page"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"P(X  a_i a_i+1)) = _k=a_i^a_i+1-1 P(X = k) + (P(X = a_i)  (a_i - a_i)) + (P(X = a_i+1)  (a_i+1 - a_i+1))","category":"page"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"All resulting discrete distributions are normalized to ensure probabilities sum to 1.","category":"page"},{"location":"#Advanced-Usage","page":"Discretise Distributions.jl Distributions","title":"Advanced Usage","text":"","category":"section"},{"location":"#Handling-Unbounded-Distributions","page":"Discretise Distributions.jl Distributions","title":"Handling Unbounded Distributions","text":"","category":"section"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"For distributions with infinite support, use quantile bounds:","category":"page"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"# Normal distribution - unbounded in both directions\nnormal_dist = Normal(0, 1)\ndiscrete_normal = discretise(normal_dist, 0.2; min_quantile=0.005, max_quantile=0.995)\n\n# Exponential distribution - unbounded above\nexp_dist = Exponential(1.0)\ndiscrete_exp = discretise(exp_dist, 0.1; max_quantile=0.99)","category":"page"},{"location":"#Custom-Interval-Structures","page":"Discretise Distributions.jl Distributions","title":"Custom Interval Structures","text":"","category":"section"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"Create non-uniform discretisations:","category":"page"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"# Fine resolution near zero, coarser elsewhere\ncustom_intervals = [-5.0, -2.0, -1.0, -0.5, 0.0, 0.5, 1.0, 2.0, 5.0]\ndiscrete_custom = discretise(Normal(0, 1), custom_intervals)","category":"page"},{"location":"#Working-with-Distribution-Alignments","page":"Discretise Distributions.jl Distributions","title":"Working with Distribution Alignments","text":"","category":"section"},{"location":"","page":"Discretise Distributions.jl Distributions","title":"Discretise Distributions.jl Distributions","text":"# Start with a discretised distribution\ndist = discretise(Normal(0, 1), 0.5)\n\n# Center the intervals\ncentered = center_distribution(dist)\n\n# Right-align for cumulative-like interpretation\nright_aligned = right_align_distribution(dist)\n\n# Shift by custom amounts\nshifted = right_align_distribution(dist, 0.25)","category":"page"},{"location":"#API-Reference","page":"Discretise Distributions.jl Distributions","title":"API Reference","text":"","category":"section"},{"location":"#DiscretiseDistributions.discretise","page":"Discretise Distributions.jl Distributions","title":"DiscretiseDistributions.discretise","text":"discretise(dist::Distributions.ContinuousUnivariateDistribution, interval::Real; \n           min_quantile=0.001, max_quantile=0.999)\n\nDiscretise a continuous univariate distribution into a discrete distribution using fixed intervals.\n\nThis function converts a continuous distribution into a discrete one by dividing the distribution's support into intervals of fixed width and computing the probability mass in each interval using the cumulative distribution function (CDF).\n\nArguments\n\ndist::Distributions.ContinuousUnivariateDistribution: The continuous distribution to discretise\ninterval::Real: The width of each discretisation interval\nmin_quantile=0.001: Lower quantile bound for unbounded distributions\nmax_quantile=0.999: Upper quantile bound for unbounded distributions\n\nReturns\n\nDiscreteNonParametric: Discrete distribution with probability masses at interval boundaries\n\nDetails\n\nFor bounded distributions, the natural bounds are used. For unbounded distributions, the bounds are determined using the specified quantiles. The probability mass in each interval is computed as the difference in CDF values at the interval boundaries, ensuring the total probability sums to 1.\n\nExamples\n\nusing Distributions, DiscretiseDistributions\n\n# Discretise a normal distribution with interval width 0.5\nnormal_dist = Normal(0, 1)\ndiscrete_normal = discretise(normal_dist, 0.5)\n\n# Discretise an exponential distribution with custom quantiles\nexp_dist = Exponential(2.0)\ndiscrete_exp = discretise(exp_dist, 0.1; min_quantile=0.01, max_quantile=0.95)\n\n\n\n\n\ndiscretise(dist::Distributions.UnivariateDistribution, interval::AbstractVector)\n\nDiscretise a univariate distribution using custom interval boundaries.\n\nThis function converts a continuous distribution into a discrete one using user-specified interval boundaries. The probability mass in each interval is computed using the cumulative distribution function (CDF) or pseudo CDF (which assume a discrete distribution only supports integers and is uniform between support points).\n\nArguments\n\ndist::Distributions.UnivariateDistribution: The distribution to discretise\ninterval::AbstractVector: Vector of interval boundaries (will be sorted automatically)\n\nReturns\n\nDiscreteNonParametric: Discrete distribution with probability masses at specified boundaries\n\nDetails\n\nThe input interval vector is automatically sorted. Probability masses are computed as differences in CDF values between consecutive boundaries. The resulting discrete distribution has support points at the interval boundaries (excluding the last boundary) with corresponding probabilities.\n\nExamples\n\nusing Distributions, DiscretiseDistributions\n\n# Discretise using custom intervals\nnormal_dist = Normal(5, 2)\ncustom_intervals = [0.0, 2.0, 4.0, 6.0, 8.0, 10.0]\ndiscrete_normal = discretise(normal_dist, custom_intervals)\n\n# The intervals will be sorted automatically if needed\nunsorted_intervals = [8.0, 0.0, 4.0, 2.0, 10.0]\ndiscrete_normal2 = discretise(normal_dist, unsorted_intervals)\n\n# Discrete distribution\npoisson_dist = Poisson(3.0)\ndiscrete_poisson = discretise(poisson_dist, [0.5, 2, 4, 6, 8, 10])\n\n\n\n\n\ndiscretise(dist::Distributions.DiscreteUnivariateDistribution, interval::Real; \n           min_quantile=0.001, max_quantile=0.999)\n\nDiscretise a discrete univariate distribution into intervals of fixed width.\n\nThis function groups the support of a discrete distribution into intervals of specified width, aggregating probability masses within each interval. This is useful for reducing the granularity of discrete distributions or for creating interval-based representations.\n\nThis is only sensible with discrete distributions that have finite support that makes sense as a continuous distribution, such as Poisson or Binomial distributions. \n\nArguments\n\ndist::Distributions.DiscreteUnivariateDistribution: The discrete distribution to discretise\ninterval::Real: The width of each discretisation interval\nmin_quantile=0.001: Lower quantile bound for unbounded distributions\nmax_quantile=0.999: Upper quantile bound for unbounded distributions\n\nReturns\n\nDiscreteNonParametric: Discrete distribution with aggregated probability masses\n\nDetails\n\nFor bounded distributions, the natural bounds are used. For unbounded distributions, bounds are determined using the specified quantiles. Probability masses are computed using the probability density function (PDF) at floored interval boundaries and normalized to sum to 1.\n\nExamples\n\nusing Distributions, DiscretiseDistributions\n\n# Discretise a Poisson distribution with interval width 2\npoisson_dist = Poisson(5.0)\ndiscrete_poisson = discretise(poisson_dist, 2)\n\n# Discretise a Binomial distribution\nbinomial_dist = Binomial(20, 0.3)\ndiscrete_binomial = discretise(binomial_dist, 3; max_quantile=0.95)\n\n\n\n\n\n","category":"function"},{"location":"#DiscretiseDistributions.right_align_distribution","page":"Discretise Distributions.jl Distributions","title":"DiscretiseDistributions.right_align_distribution","text":"right_align_distribution(dist::Distributions.DiscreteNonParametric)\n\nRight-align a discrete distribution by shifting probabilities to the next support point.\n\nThis function creates a new distribution where each probability mass is associated with the next support point (right-aligned). The last probability mass is dropped since there's no support point to the right of the last one.\n\nArguments\n\ndist::Distributions.DiscreteNonParametric: Input discrete distribution\n\nReturns\n\nDiscreteNonParametric: New distribution with right-aligned probabilities\n\nExamples\n\nusing Distributions, DiscretiseDistributions\n\n# Create a distribution with support at [1, 2, 3, 4] and probs [0.2, 0.3, 0.3, 0.2]\ndist = DiscreteNonParametric([1.0, 2.0, 3.0, 4.0], [0.2, 0.3, 0.3, 0.2])\n\n# Right-align - support becomes [2, 3, 4] with probs [0.2, 0.3, 0.3]\nright_aligned = right_align_distribution(dist)\n\n\n\n\n\nright_align_distribution(dist::Distributions.DiscreteNonParametric, interval)\n\nRight-align a discrete distribution by shifting all support points by the given interval.\n\nThis function shifts all support points of the distribution by the specified interval, effectively moving the entire distribution to the right. All probability masses are preserved.\n\nArguments\n\ndist::Distributions.DiscreteNonParametric: Input discrete distribution\ninterval: The interval by which to shift the support points\n\nReturns\n\nDiscreteNonParametric: New distribution with shifted support points\n\nExamples\n\nusing Distributions, DiscretiseDistributions\n\n# Create a distribution\ndist = DiscreteNonParametric([1.0, 2.0, 3.0], [0.3, 0.4, 0.3])\n\n# Shift right by 0.5 - support becomes [1.5, 2.5, 3.5]\nright_aligned = right_align_distribution(dist, 0.5)\n\n\n\n\n\n","category":"function"},{"location":"#DiscretiseDistributions.center_distribution","page":"Discretise Distributions.jl Distributions","title":"DiscretiseDistributions.center_distribution","text":"center_distribution(dist::Distributions.DiscreteNonParametric)\n\nCenter a discrete distribution by shifting support points to the midpoints between consecutive intervals.\n\nThis function takes the support points of a discrete distribution and creates a new distribution where each support point is positioned at the center of the interval between consecutive original support points. The last probability mass is dropped since there's no interval after the last point.\n\nArguments\n\ndist::Distributions.DiscreteNonParametric: Input discrete distribution\n\nReturns\n\nDiscreteNonParametric: New distribution with centered support points\n\nExamples\n\nusing Distributions, DiscretiseDistributions\n\n# Create a distribution with support at [1, 2, 3, 4]\ndist = DiscreteNonParametric([1.0, 2.0, 3.0, 4.0], [0.25, 0.25, 0.25, 0.25])\n\n# Center the distribution - support becomes [1.5, 2.5, 3.5]\ncentered = center_distribution(dist)\n\n\n\n\n\ncenter_distribution(dist::Distributions.DiscreteNonParametric, interval)\n\nCenter a discrete distribution by shifting all support points by half the given interval.\n\nThis function shifts all support points of the distribution by interval / 2, effectively centering the distribution relative to the specified interval. All probability masses are preserved.\n\nArguments\n\ndist::Distributions.DiscreteNonParametric: Input discrete distribution\ninterval: The interval by which to center (support shifted by interval / 2)\n\nReturns\n\nDiscreteNonParametric: New distribution with shifted support points\n\nExamples\n\nusing Distributions, DiscretiseDistributions\n\n# Create a distribution\ndist = DiscreteNonParametric([1.0, 2.0, 3.0], [0.3, 0.4, 0.3])\n\n# Center by interval of 1.0 - support becomes [1.5, 2.5, 3.5]\ncentered = center_distribution(dist, 1.0)\n\n\n\n\n\n","category":"function"}]
}
